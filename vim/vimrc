set expandtab
set textwidth=0
set tabstop=4
set softtabstop=4
set shiftwidth=4
set autoindent
set backspace=indent,eol,start
set incsearch
set ignorecase
set ruler
set wildmenu
set commentstring=\ #\ %s
set foldlevel=0
set clipboard+=unnamed
set number
set laststatus=2
set statusline=%F,%r,L=%l,C=%c
if has("win32")
    set termencoding=sjis
endif
set encoding=utf-8
set fileencodings=iso-2022-jp,sjis,utf-8,euc-jp
set nobackup
set foldcolumn=4
syntax on

" reser autocmd
augroup myvimrc
    autocmd!
augroup END

autocmd FileType text setlocal textwidth=0

" for neobundle
set nocompatible
filetype off

if has('vim_starting')
    if has("win32") || has("win64")
        set shellpipe=
        set runtimepath+=$HOME/vimfiles/bundle/neobundle.vim/
    else
        set runtimepath+=~/.vim/bundle/neobundle.vim/
    endif
endif
if has("win32") || has("win64")
    call neobundle#rc(expand('$HOME/vimfiles/bundle'))
else
    call neobundle#rc(expand('~/.vim/bundle/'))
endif

NeoBundleFetch 'Shougo/neobundle.vim'
NeoBundle 'Shougo/vimproc', {
    \ 'build' : {
    \       'windows' : 'make -f make_mingw64.mak',
    \       'unix' : 'make -f make_unix.mak',
    \   }
    \ }
NeoBundle 'Shougo/neocomplcache'
NeoBundle 'Shougo/neosnippet'
NeoBundle "Shougo/neosnippet-snippets"
NeoBundle 'thinca/vim-scouter'
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'vim-jp/vital.vim'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'vim-jp/vimdoc-ja'
NeoBundle 'vim-scripts/sudo.vim'
NeoBundle 'itchyny/lightline.vim'
NeoBundle 'thinca/vim-guicolorscheme'
NeoBundle 'tsukkee/unite-help'
NeoBundle 'vim-scripts/YankRing.vim'
NeoBundle 'h1mesuke/unite-outline'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'mhinz/vim-startify'
NeoBundle 'kakkyz81/evervim'

filetype plugin on
filetype indent on

" Installation check
NeoBundleCheck

" """neocomplcache"""
if has("win32") || has("win64")
"    let g:neocomplcache_snippets_dir = $HOME . '/vimfiles/snippets'
else
"    let g:neocomplcache_snippets_dir = $HOME . '/.vim/snippets'
endif

"Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplcache.
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 10
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'
" Prevent auto complete
let g:neocomplcache_enable_insert_char_pre = 1
" Define dictionary.
let g:neocomplcache_dictionary_filetype_lists = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }
" Define keyword.
if !exists('g:neocomplcache_keyword_patterns')
    let g:neocomplcache_keyword_patterns = {}
endif
let g:neocomplcache_keyword_patterns['default'] = '\h\w*'
" Plugin key-mappings.
inoremap <expr><C-g> neocomplcache#undo_completion()
inoremap <expr><C-l> neocomplcache#complete_common_string()
" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
    return neocomplcache#smart_close_popup() . "\<CR>"
    " For no inserting <CR> key.
    "return pumvisible() ? neocomplcache#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS>  neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y> neocomplcache#close_popup()
inoremap <expr><C-e> neocomplcache#cancel_popup()
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? neocomplcache#close_popup() :
""\<Space>"

" For cursor moving in insert mode(Not recommended)
inoremap <expr><Left>  neocomplcache#close_popup() . "\<Left>"
inoremap <expr><Right> neocomplcache#close_popup() . "\<Right>"
inoremap <expr><Up>    neocomplcache#close_popup() . "\<Up>"
inoremap <expr><Down>  neocomplcache#close_popup() . "\<Down>"
" Or set this.
"let g:neocomplcache_enable_cursor_hold_i = 1
" Or set this.
"let g:neocomplcache_enable_insert_char_pre = 1
" AutoComplPop like behavior.
"let g:neocomplcache_enable_auto_select = 1
" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplcache_enable_auto_select = 1
"let g:neocomplcache_disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"
" Or set this.
"let g:neocomplcache_enable_cursor_hold_i = 1
" Or set this.
"let g:neocomplcache_enable_insert_char_pre = 1
" AutoComplPop like behavior.
"let g:neocomplcache_enable_auto_select = 1
" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplcache_enable_auto_select = 1
"let g:neocomplcache_disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" for snippets
imap <expr><C-k> neocomplcache#sources#snippets_complete#expandable() ? "\<Plug>(neocomplcache_snippets_expand)" : pumvisible() ? "\<C-n>" : "\<TAB>"
smap <C-k> <Plug>(neocomplcache_snippets_expand)

" for solarized
if has('gui_running')
    set background=light
    colorscheme solarized
else
    colorscheme default
endif


" disable IME, when exit insert mode
inoremap <silent> <ESC> <ESC>:set iminsert=0<CR>

" for YankRing.vim
let g:yankring_history_file = '.yankring_history_file'
set clipboard+=unnamedplus,unnamed
nmap ,y :YRShow<CR>

" edit vimrc
nnoremap <F5> :<C-u>tabedit $MYVIMRC<CR>
nnoremap <F6> :<C-u>source $MYVIMRC<CR>
                 \ :source $MYGVIMRC<CR>

" Ë°åÊú´„Çπ„Éö„Éº„Çπ„Çí„Éè„Ç§„É©„Ç§„Éà„ÅßÂèØË¶ñÂåñ„Åô„Çã
autocmd myvimrc VimEnter,WinEnter * 
\ match Error /s+$/

" „Ç´„Éº„ÇΩ„É´„Ç≠„Éº„ÅåABCD„Å´„Å™„Çâ„Å™„ÅÑ„Çà„ÅÜ„Å´„Åô„Çã
noremap OA <Up>
noremap OB <Down>
noremap OC <Right>
noremap OD <Left>
