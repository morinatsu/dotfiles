set backspace=indent,eol,start
set incsearch
set ignorecase
set ruler
set wildmenu
set commentstring=\ #\ %s
set foldlevel=0
set clipboard+=unnamed
set number
set laststatus=2
set statusline=%F,%r,L=%l,C=%c
if has("win32")
    set termencoding=sjis
endif
set encoding=utf-8
set fileencodings=iso-2022-jp,sjis,utf-8,euc-jp
set nobackup
set foldcolumn=4
syntax on

" reset autocmd
augroup myvimrc
    autocmd!
augroup END

autocmd FileType text setlocal textwidth=0

" for neobundle
set nocompatible
filetype off
let g:neobundle_default_git_protocol='git'

if has('vim_starting')
    if has("win32") || has("win64")
        set shellpipe=
        set runtimepath+=$HOME/vimfiles/bundle/neobundle.vim/
        set undodir=$TEMP/
        set directory=$TEMP/
    else
        set runtimepath+=~/.vim/bundle/neobundle.vim/
    endif
endif
if has("win32") || has("win64")
    call neobundle#rc(expand('$HOME/vimfiles/bundle'))
else
    call neobundle#rc(expand('~/.vim/bundle/'))
endif

NeoBundleFetch 'Shougo/neobundle.vim'
NeoBundle 'Shougo/vimproc.vim', {
    \ 'build' : {
    \       'windows' : 'tools\\update-dll-mingw',
    \       'unix' : 'make -f make_unix.mak',
    \   },
    \ }
NeoBundle 'Shougo/neocomplete'
NeoBundle 'Shougo/neosnippet'
NeoBundle "Shougo/neosnippet-snippets"
NeoBundle 'thinca/vim-scouter'
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'vim-jp/vital.vim'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'vim-jp/vimdoc-ja'
NeoBundle 'vim-scripts/sudo.vim'
if has("win32") || has("win64")
    NeoBundle 'itchyny/lightline.vim'
endif
NeoBundle 'thinca/vim-guicolorscheme'
NeoBundle 'tsukkee/unite-help'
NeoBundle 'LeafCage/yankround.vim'
NeoBundle 'h1mesuke/unite-outline'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'mhinz/vim-startify'
NeoBundle 'scrooloose/syntastic.git'
NeoBundle 'deton/imactivatemap.vim'
NeoBundle 'justinmk/vim-dirvish'
NeoBundle 'soramugi/auto-ctags.vim'
NeoBundle 'tsukkee/unite-tag'
NeoBundle 'PProvost/vim-ps1'

filetype plugin on
filetype indent on

" Installation check
NeoBundleCheck

"Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g> neocomplete#undo_completion()
inoremap <expr><C-l> neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
    return neocomplete#smart_close_popup() . "\<CR>"
    " For no inserting <CR> key.
    "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction

" <TAB>: completion.
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS>  neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y> neocomplete#close_popup()
inoremap <expr><C-e> neocomplete#cancel_popup()
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() :
""\<Space>"

" For cursor moving in insert mode(Not recommended)
"inoremap <expr><Left>  neocomplete#close_popup() . "\<Left>"
"inoremap <expr><Right> neocomplete#close_popup() . "\<Right>"
"inoremap <expr><Up>    neocomplete#close_popup() . "\<Up>"
"inoremap <expr><Down>  neocomplete#close_popup() . "\<Down>"
" Or set this.
"let g:neocomplete#enable_cursor_hold_i = 1
" Or set this.
"let g:neocomplete#enable_insert_char_pre = 1

" AutoComplPop like behavior.
"let g:neocomplete#enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni cpmpletion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\/\h\w*::'
"let g;neocomplete#sources#omni#input_patterns.c = '[^.[:digit:]
"*\t]\%(\.\/->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:]
"*\t]\%(\.\/->\)\/\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

" for snippets
" Plugin key-mappings
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"

" For snippet_complete marker
if has('conceal')
    set conceallevel=2 concealcursor=i
endif

" for solarized
if has('gui_running')
    set background=light
    colorscheme solarized
else
    colorscheme default
endif


" disable IME, when exit insert mode
inoremap <silent> <ESC> <ESC>:set iminsert=0<CR>

" for Yankround.vim
nmap p <Plug>(yankround-p)
xmap p <Plug>(yankround-p)
nmap P <Plug>(yankround-P)
nmap gp <Plug>(yankround-gp)
xmap gp <Plug>(yankround-gp)
nmap gP <Plug>(yankround-gP)
nmap <C-p> <Plug>(yankround-prev)
nmap <C-n> <Plug>(yankround-next)
if has("win32") || has("win64")
    let g:yankround_dir = expand('$HOME/vimfiles/yankround')
endif

" edit vimrc
nnoremap <F5> :<C-u>tabedit $MYVIMRC<CR>
nnoremap <F6> :<C-u>source $MYVIMRC<CR>
                 \ :source $MYGVIMRC<CR>

" Ë°åÊú´„Çπ„Éö„Éº„Çπ„Çí„Éè„Ç§„É©„Ç§„Éà„ÅßÂèØË¶ñÂåñ„Åô„Çã
autocmd myvimrc VimEnter,WinEnter *
\ match Error /s+$/

" „Ç´„Éº„ÇΩ„É´„Ç≠„Éº„ÅåABCD„Å´„Å™„Çâ„Å™„ÅÑ„Çà„ÅÜ„Å´„Åô„Çã
noremap OA <Up>
noremap OB <Down>
noremap OC <Right>
noremap OD <Left>

" sorce credential file
if has("win32") || has("win64")
    source $HOME\vimfiles\vimrc_cred
else
    source ~/.vim/vimrc_cred
endif

" don't use auto SweetTrail
let g:sweep_trail#enable = 1

" Powerline
if !has("win32") && !has("win64")
    if has("python3")
        python3 from powerline.vim import setup as powerline_setup
        python3 powerline_setup()
        python3 del powerline_setup
        set laststatus=2 " Always display the statusline in all windows
        set showtabline=2 " Always display the tabline, even if there is only one tab
        set noshowmode " Hide the default mode text (e.g. -- INSERT -- below the statusline)
    endif
    if has("python")
        python from powerline.vim import setup as powerline_setup
        python powerline_setup()
        python del powerline_setup
        set laststatus=2 " Always display the statusline in all windows
        set showtabline=2 " Always display the tabline, even if there is only one tab
        set noshowmode " Hide the default mode text (e.g. -- INSERT -- below the statusline)
    endif
endif

" auto-ctags.vim
let g:auto_ctags = 1
let g:auto_ctags_tags_name = '.tags'
set tags=.tags;
let g:auto_ctags_directory_list = ['.git']

" Don't conceall double quote of json
autocmd Filetype json setl conceallevel=0
